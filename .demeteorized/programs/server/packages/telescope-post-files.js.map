{"version":3,"file":"/packages/telescope-post-files.js","sources":["telescope-post-files/server/files.js","telescope-post-files/server/main.js","telescope-post-files/server/publish.js","telescope-post-files/server/posts.js","telescope-post-files/server/security.js","telescope-post-files/common/0_stores.js","telescope-post-files/common/1_collections.js","telescope-post-files/common/common.js","telescope-post-files/common/routes.js","telescope-post-files/common/posts.js","telescope-post-files/common/extend.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4B;;AAEA,mC;AACA,2B;AACA,+C;AACA,yC;AACA,+D;AACA,8B;AACA,wB;AACA,8F;;AAEA,wC;AACA,kC;AACA,W;AACA,Q;;AAEA,mD;AACA,0D;AACA,+C;AACA,0D;AACA,kB;AACA,K;;AAEA,qB;AACA,qE;AACA,iC;AACA,wI;AACA,sB;AACA,iC;AACA,S;AACA,oB;AACA,K;;AAEA,qC;;;AAGA,G;AACA,kC;AACA,W;AACA,gC;AACA,E;AACA,wC;AACA,G;AACA,0C;AACA,kB;AACA,sB;AACA,I;AACA,6D;AACA,4E;AACA,4B;AACA,wE;;AAEA,yC;AACA,+B;;AAEA,4B;AACA,mB;;AAEA,uB;AACA,mD;;AAEA,8C;AACA,0E;AACA,2C;AACA,mD;;AAEA,qB;AACA,2E;AACA,2C;AACA,uD;AACA,G;;AAEA,uC;AACA,U;AACA,2B;AACA,e;AACA,0B;AACA,4B;AACA,2B;AACA,I;AACA,E;;AAEA,G;AACA,yB;AACA,W;AACA,0B;AACA,E;AACA,2B;AACA,G;AACA,+C;AACA,kB;AACA,6D;AACA,kF;AACA,oH;;AAEA,gC;;AAEA,mE;AACA,sC;AACA,mD;AACA,iD;AACA,G;;AAEA,8B;AACA,uD;;AAEA,iB;AACA,sF;AACA,G;;AAEA,iB;AACA,4C;;AAEA,kB;AACA,wG;AACA,G;;AAEA,+B;AACA,+B;;AAEA,qC;AACA,kC;AACA,U;AACA,oD;AACA,G;;AAEA,4E;AACA,4C;AACA,iD;AACA,qF;AACA,U;AACA,oD;AACA,G;;AAEA,0E;AACA,4F;AACA,c;AACA,yB;AACA,6B;;AAEA,oB;AACA,yB;AACA,qE;;AAEA,qB;AACA,oE;AACA,gC;AACA,uC;AACA,6B;AACA,qB;AACA,yB;AACA,iE;AACA,0D;AACA,0E;AACA,oB;AACA,qE;;AAEA,wF;AACA,iD;AACA,gE;;AAEA,6C;AACA,gC;AACA,U;AACA,4C;AACA,6B;AACA,+D;AACA,4D;AACA,4F;AACA,G;;AAEA,iC;AACA,+C;AACA,U;AACA,kC;AACA,G;;AAEA,+E;AACA,I;AACA,0G;AACA,yC;AACA,K;AACA,I;;AAEA,oE;AACA,kD;;AAEA,oD;AACA,oE;;AAEA,yE;AACA,2C;;AAEA,iF;;AAEA,wC;AACA,6C;AACA,wC;AACA,gE;AACA,Y;AACA,+D;AACA,K;AACA,K;;AAEA,4C;AACA,E;;;AAGA,8C;AACA,8C;AACA,+B;AACA,6B;AACA,8C;AACA,6F;AACA,oG;AACA,iB;AACA,4B;AACA,oB;AACA,0C;AACA,iD;AACA,gD;AACA,e;AACA,sC;AACA,gE;AACA,iD;AACA,kF;AACA,a;AACA,S;AACA,K;;;;;;AAMA,yB;AACA,qC;;AAEA,uD;AACA,kF;AACA,oB;AACA,kF;AACA,8B;AACA,K;;AAEA,8B;;AAEA,G;;AAEA,Y;;;;;;;;;;;;;;;;;;;ACzPA,2B;AACA,4B;AACA,oE;AACA,0D;;AAEA,uD;AACA,uE;AACA,K;AACA,G;;AAEA,gB;AACA,6B;AACA,yJ;AACA,I;AACA,+B;AACA,2E;AACA,I;AACA,sB;AACA,0D;AACA,0D;AACA,4D;AACA,2D;AACA,O;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;ACxBA,gD;AACA,gD;AACA,G;;AAEA,4C;AACA,+E;AACA,G;;AAEA,mC;AACA,iC;AACA,G;;AAEA,oC;AACA,kC;AACA,G;;;;;;;;;;;;;;;;;;;;ACbA,mD;;AAEA,6B;AACA,yB;AACA,uF;AACA,iF;;AAEA,gB;AACA,G;;;;;;;;;;;;;;;;;;;;ACTA,kC;AACA,oC;;AAEA,2B;;AAEA,6B;AACA,uB;AACA,uB;AACA,uB;AACA,wB;AACA,O;;AAEA,4B;AACA,wB;AACA,wB;AACA,wB;AACA,yB;AACA,O;;AAEA,8B;AACA,uB;AACA,uB;AACA,uB;AACA,wB;AACA,O;;AAEA,6B;AACA,wB;AACA,wB;AACA,wB;AACA,yB;AACA,O;;AAEA,4B;AACA,uB;AACA,uB;AACA,sB;AACA,O;;AAEA,2B;AACA,wB;AACA,wB;AACA,uB;AACA,O;;AAEA,6B;AACA,uB;AACA,uB;AACA,sB;AACA,O;;AAEA,4B;AACA,wB;AACA,wB;AACA,uB;AACA,O;AACA,G;;;;;;;;;;;;;;;;;;;ACxDA,Y;;AAEA,+C;AACA,yD;AACA,iE;AACA,wD;AACA,M;;AAEA,0C;AACA,yD;AACA,iE;AACA,sD;AACA,M;;AAEA,8C;AACA,+C;AACA,kC;AACA,iD;AACA,uD;AACA,Y;AACA,uB;AACA,uB;AACA,M;AACA,I;AACA,8D;AACA,2D;AACA,8D;AACA,8E;AACA,G;AACA,G;;AAEA,sB;AACA,mC;AACA,2C;AACA,S;AACA,6C;;AAEA,gD;AACA,kD;AACA,8C;AACA,6B;;AAEA,6C;AACA,2D;AACA,wB;AACA,iD;;AAEA,uC;;AAEA,iB;AACA,a;AACA,S;AACA,M;AACA,M;AACA,4C;;;;;;;;;;;;;;;;;;;;ACtDA,iB;;AAEA,uE;;AAEA,kD;AACA,W;AACA,kB;AACA,iB;AACA,I;AACA,W;AACA,yC;AACA,Y;AACA,+B;AACA,M;AACA,kC;AACA,wC;AACA,K;AACA,G;AACA,G;;AAEA,gD;AACA,uB;AACA,4B;AACA,G;;AAEA,gD;AACA,gD;AACA,S;AACA,gB;AACA,I;AACA,W;AACA,iB;AACA,e;AACA,uB;AACA,yB;AACA,K;AACA,G;AACA,I;;AAEA,kD;AACA,iD;AACA,S;AACA,gB;AACA,I;AACA,W;AACA,mB;AACA,e;AACA,wB;AACA,yB;AACA,K;AACA,G;AACA,I;;;;;;;;;;;;;;;;;;ACnDA,4C;;AAEA,8B;AACA,0B;AACA,+C;AACA,G;;AAEA,0C;AACA,0B;AACA,gB;AACA,U;;;;;;;;;;;;;;;;;;ACVA,kB;AACA,gC;AACA,6B;AACA,0B;AACA,G;;AAEA,iC;;AAEA,uB;;AAEA,uB;AACA,sB;AACA,mD;AACA,G;;AAEA,sB;;AAEA,4D;AACA,mC;AACA,mC;AACA,yC;AACA,yD;AACA,8E;AACA,U;AACA,K;;AAEA,0B;AACA,yD;AACA,oC;AACA,K;;AAEA,4D;AACA,mC;AACA,4E;AACA,K;;AAEA,yD;AACA,mC;AACA,qF;AACA,K;;AAEA,C;;;;;;;;;;;;;;;;;;;;;ACvCA,oF;;AAEA,2B;AACA,yB;AACA,O;AACA,qC;AACA,yB;AACA,yB;AACA,yB;AACA,M;AACA,yB;AACA,qB;AACA,8B;AACA,+B;AACA,W;AACA,M;AACA,S;AACA,O;AACA,M;;AAEA,G;;;;;;;;;;;;;;;;;;;;ACrBA,uB;AACA,e;AACA,wD;AACA,Q;AACA,0D;AACA,C","sourcesContent":["\nMeteor.startup(function () {\n\n  // My auth will return the userId\n  var myAuth = function() {\n        // Read the token from '/hello?token=5'\n        var userToken = self.query.token;\n        // Check the userToken before adding it to the db query\n        // Set the this.userId\n        if (userToken) {\n          var user = Meteor.users.findOne({ 'services.resume.loginTokens.token': userToken });\n\n          // Set the userId in the scope\n          return user && user._id;\n        }  \n      };\n\n    function readCookie(cookieHeader, cookieName) {\n     var re = new RegExp('[; ]'+cookieName+'=([^\\\\s;]*)');\n     var sMatch = (' '+cookieHeader).match(re);\n     if (cookieName && sMatch) return unescape(sMatch[1]);\n     return  null;\n    }\n\n    function auth() {\n        var meteor_login_token = this.req.cookies.meteor_login_token;\n        if (meteor_login_token) {\n             var user = Meteor.users.findOne({\"services.resume.loginTokens.hashedToken\": Accounts._hashLoginToken(meteor_login_token)});\n             if (user)\n                 return user._id;\n        }\n        return null;\n    }\n\n//copied from Meteor-cfs-access-point\n\n\n/**\n * @method defaultSelectorFunction\n * @private\n * @returns { collection, file }\n *\n * This is the default selector function\n */\nvar defaultSelectorFunction = function() {\n  var self = this;\n  // Selector function\n  //\n  // This function will have to return the collection and the\n  // file. If file not found undefined is returned - if null is returned the\n  // search was not possible\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});\n\n  // Get the collection name from the url\n  var collectionName = \"files\";\n\n  // Get the id from the url\n  var id = opts.id;\n\n  // Get the collection\n  var collection = FS._collections[collectionName];\n\n  // Get the file if possible else return null\n  var q = ({post: this.params.postId, 'original.name': this.params.name});\n  var file =  Collections.Files.findOne(q);\n  console.log(\">>>>>>>>>>>> q=\", q, \" file\", file);\n\n  if (file == null) {\n      q = ({owner: this.params.postId, 'original.name': this.params.name});\n      file =  Collections.Files.findOne(q);\n      console.log(\">>>>>>>>>>>> q=\", q, \" file\", file);\n  }\n\n  // Return the collection and the file\n  return {\n    collection: collection,\n    file: file,\n    storeName: opts.store,\n    download: opts.download,\n    filename: opts.filename\n  };\n};\n\n/**\n * @method httpGetHandler\n * @private\n * @returns {any} response\n *\n * HTTP GET request handler\n */\nhttpGetHandler = function httpGetHandler(ref) {\n  var self = this;\n  // Once we have the file, we can test allow/deny validators\n  // XXX: pass on the \"share\" query eg. ?share=342hkjh23ggj for shared url access?\n  FS.Utility.validateAction(ref.collection._validators['download'], ref.file, self.userId /*, self.query.shareId*/);\n\n  var storeName = ref.storeName;\n\n  // If no storeName was specified, use the first defined storeName\n  if (typeof storeName !== \"string\") {\n    // No store handed, we default to primary store\n    storeName = ref.collection.primaryStore.name;\n  }\n\n  // Get the storage reference\n  var storage = ref.collection.storesLookup[storeName];\n\n  if (!storage) {\n    throw new Meteor.Error(404, \"Not Found\", 'There is no store \"' + storeName + '\"');\n  }\n\n  // Get the file\n  var copyInfo = ref.file.copies[storeName];\n\n  if (!copyInfo) {\n    throw new Meteor.Error(404, \"Not Found\", 'This file was not stored in the ' + storeName + ' store');\n  }\n\n  var fileType = copyInfo.type;\n  var fileSize = copyInfo.size;\n\n  if (typeof fileType === \"string\") {\n    self.setContentType(fileType);\n  } else {\n    self.setContentType('application/octet-stream');\n  }\n\n  // Add 'Content-Disposition' header if requested a download/attachment URL\n  if (typeof ref.download !== \"undefined\") {\n    var filename = ref.filename || copyInfo.name;\n    self.addHeader('Content-Disposition', 'attachment; filename=\"' + filename + '\"');\n  } else {\n    self.addHeader('Content-Disposition', 'inline');\n  }\n\n  // If a chunk/range was requested instead of the whole file, serve that'\n  var start, end, unit, contentLength, readStreamOptions, range = self.requestHeaders.range;\n  if (range) {\n    // Parse range header\n    range = range.split('=');\n\n    unit = range[0];\n    if (unit !== 'bytes')\n      throw new Meteor.Error(416, \"Requested Range Not Satisfiable\");\n\n    range = range[1];\n    // Spec allows multiple ranges, but we will serve only the first\n    range = range.split(',')[0];\n    // Get start and end byte positions\n    range = range.split('-');\n    start = range[0];\n    end = range[1] || '';\n    // Convert to numbers and adjust invalid values when possible\n    start = start.length ? Math.max(Number(start), 0) : 0;\n    end = end.length ? Math.min(Number(end), fileSize - 1) : fileSize - 1;\n    if (end < start)\n      throw new Meteor.Error(416, \"Requested Range Not Satisfiable\");\n\n    self.addHeader('Content-Range', 'bytes ' + start + '-' + end + '/' + copyInfo.size);\n    readStreamOptions = {start: start, end: end};\n    end = end + 1; //HTTP end byte is inclusive and ours are not\n\n    // Sets properly content length for range\n    contentLength = end - start;\n  } else {\n    // Content length, defaults to file size\n    contentLength = fileSize;\n    // Some browsers cope better if the content-range header is\n    // still included even for the full file being returned.\n    self.addHeader('Content-Range', 'bytes 0-' + (contentLength - 1) + '/' + contentLength);\n  }\n\n  if (contentLength < fileSize) {\n    self.setStatusCode(206, 'Partial Content');\n  } else {\n    self.setStatusCode(200, 'OK');\n  }\n\n  // Add any other global custom headers and collection-specific custom headers\n  /*\n  FS.Utility.each(getHeaders.concat(getHeadersByCollection[ref.collection.name] || []), function(header) {\n    self.addHeader(header[0], header[1]);\n  });\n  */\n\n  // Inform clients about length (or chunk length in case of ranges)\n  self.addHeader('Content-Length', contentLength);\n\n  // Last modified header (updatedAt from file info)\n  self.addHeader('Last-Modified', copyInfo.updatedAt.toUTCString());\n\n  // Inform clients that we accept ranges for resumable chunked downloads\n  self.addHeader('Accept-Ranges', 'bytes');\n\n  var readStream = storage.adapter.createReadStream(ref.file, readStreamOptions);\n\n  readStream.on('error', function(err) {\n    // Send proper error message on get error\n    if (err.message && err.statusCode) {\n      self.Error(new Meteor.Error(err.statusCode, err.message));\n    } else {\n      self.Error(new Meteor.Error(503, 'Service unavailable'));\n    }\n  });\n\n  readStream.pipe(self.createWriteStream());\n};\n\n\n    function get_postFileGetRequest(numArgs) {\n        return function postFileGetRequest() {\n            if (numArgs == 0) {\n              var result =\"\";\n              var postId = this.params.postId;\n              Collections.Files.find({post: postId}, { sort: {name:1}}).forEach(function(f) {\n                  result += \"<a target='_blank' href='\" + PostUrl(f)  + \"'>\" +  f.name()+\"</a><br>\";\n              });\n              return result;\n            } else {\n              var name = this.params[''+0]\n              for (var i = 1; i < numArgs; i++) {\n                 name += \"/\" + this.params[''+i]\n              }\n              this.params.name = name;\n              var fileRef = defaultSelectorFunction.apply(this);\n              httpGetHandler.call(this, fileRef);\n              // return numArgs + ' <b>posts filename username=</b>'+ this.userId;\n            }\n        }\n    }\n\n\n\n\n\n    var methodParam = {};\n    var name =  'posts/:postId/file';\n\n    for (var numArgs = 0; numArgs <= 100; numArgs ++) {\n        methodParam[name] = {  auth: auth, get: get_postFileGetRequest(numArgs)} ;\n        name += \"/\";\n        methodParam[name] = {  auth: auth, get: get_postFileGetRequest(numArgs)} ;\n        name += \":\" + numArgs;\n    }\n\n    HTTP.methods(methodParam);\n\n});\n\n            \n","Meteor.startup(function() {\n  //ImageUploads.remove({});\n  console.log(\"Images Uploads:\", Collections.Images.find().count());\n  console.log(\"Files:\", Collections.Files.find().count());\n\n  Collections.Images.on('removed', function (fileObj) {\n    console.log(\"Removed \" + fileObj._id + \" from Images collection.\");\n  });\n});\n\nMeteor.methods({\n  testUrlInsert: function() {\n    return Collections.Images.insert(\"http://cdn.morguefile.com/imageData/public/files/b/bboomerindenial/preview/fldr_2009_04_01/file3301238617907.jpg\");\n  },\n  testFileInsert: function () {\n    return Collections.Images.insert(\"/Users/Eric/Downloads/testfile.jpg\");\n  },\n  rotate: function() {\n    Collections.Images.find().forEach(function (fileObj) {\n      var readStream = fileObj.createReadStream('images');\n      var writeStream = fileObj.createWriteStream('images');\n      gm(readStream).swirl(180).stream().pipe(writeStream);\n    });\n  }\n});","Meteor.publish(\"postedFiles\", function(postId) {\n  return Collections.Files.find({post: postId});\n});\n\nMeteor.publish(\"uploadedFiles\", function() {\n  return Collections.Files.find({owner: this.userId, post: { $exists: false}});\n});\n\nMeteor.publish(\"docs\", function() {\n  return Collections.Docs.find();\n});\n\nMeteor.publish(\"docs2\", function() {\n  return Collections.Docs2.find();\n});\n","\npostAfterSubmitMethodCallbacks.push(function(post){\n\n    _.map( post.medbookfiles,\n         function(fid) { \n            console.log(\"postAfterSubmitMethodCallbacks.push fid pid\", fid,  post._id);\n            Collections.Files.update({ _id: fid}, { $set: { post: post._id} })});\n\n    return post;\n});\n\n","function trueFunc() {return true;}\nfunction falseFunc() {return false;}\n\nMeteor.startup(function() {\n\n    Collections.Files.allow({\n      insert: trueFunc,\n      update: trueFunc,\n      remove: trueFunc,\n      download: trueFunc\n    });\n\n    Collections.Files.deny({\n      insert: falseFunc,\n      update: falseFunc,\n      remove: falseFunc,\n      download: falseFunc\n    });\n\n    Collections.Images.allow({\n      insert: trueFunc,\n      update: trueFunc,\n      remove: trueFunc,\n      download: trueFunc\n    });\n\n    Collections.Images.deny({\n      insert: falseFunc,\n      update: falseFunc,\n      remove: falseFunc,\n      download: falseFunc\n    });\n\n    Collections.Docs.allow({\n      insert: trueFunc,\n      update: trueFunc,\n      remove: trueFunc\n    });\n\n    Collections.Docs.deny({\n      insert: falseFunc,\n      update: falseFunc,\n      remove: falseFunc\n    });\n\n    Collections.Docs2.allow({\n      insert: trueFunc,\n      update: trueFunc,\n      remove: trueFunc\n    });\n\n    Collections.Docs2.deny({\n      insert: falseFunc,\n      update: falseFunc,\n      remove: falseFunc\n    });\n});\n","Stores = {};\n\n// var imageStore = new FS.Store.S3(\"images\", {\n//   accessKeyId: Meteor.settings.accessKeyId, //required\n//   secretAccessKey: Meteor.settings.secretAccessKey, //required\n//   bucket: Meteor.settings.imageStoreBucket //required\n// });\n\n// var anyStore = new FS.Store.S3(\"any\", {\n//   accessKeyId: Meteor.settings.accessKeyId, //required\n//   secretAccessKey: Meteor.settings.secretAccessKey, //required\n//   bucket: Meteor.settings.anyStoreBucket //required\n// });\n\nStores.images = new FS.Store.GridFS(\"images\");\nStores.thumbs = new FS.Store.GridFS(\"thumbs\", {\n  beforeWrite: function(fileObj) {\n    // We return an object, which will change the\n    // filename extension and type for this store only.\n    return {\n      extension: 'png',\n      type: 'image/png'\n    };\n  },\n  transformWrite: function(fileObj, readStream, writeStream) {\n    // Transform the image into a 60px x 60px PNG thumbnail\n    gm(readStream).resize(60).stream('PNG').pipe(writeStream);\n    // The new file size will be automatically detected and set for this store\n  }\n});\n\nif (Meteor.isServer) {\n    var mime = Npm.require(\"mime\");\n    Stores.any = new FS.Store.GridFS(\"any\",\n        {\n            beforeWrite: function(fileObj) { \n\n            // HANDLE SPECIAL MEDBOOK MIME TYPES\n                if (fileObj.original.type == \"\") {\n                    var name = fileObj.name();\n                    var type;\n\n                    if (name.match(/\\.tab$/))\n                        type = 'text/tab-separated-values';\n                    else\n                        type = mime.lookup(name);\n\n                    fileObj.type(type);\n\n                }\n            }\n        }\n    );\n} else\n    Stores.any = new FS.Store.GridFS(\"any\");\n\n","Collections = {};\n\nMeteor.isClient && Template.registerHelper(\"Collections\", Collections);\n\nCollections.Images = new FS.Collection(\"images\", {\n  stores: [\n    Stores.images,\n    Stores.thumbs\n  ],\n  filter: {\n    maxSize: 20 * 1024 * 1024, //in bytes\n    allow: {\n      contentTypes: ['image/*']\n    },\n    onInvalid: function(message) {\n      Meteor.isClient && alert(message);\n    }\n  }\n});\n\nCollections.Files = new FS.Collection(\"files\", {\n  stores: [Stores.any],\n  chunkSize: 4 * 1024 * 1024\n});\n\nCollections.Docs = new Mongo.Collection(\"docs\");\nCollections.Docs.attachSchema(new SimpleSchema({\n  name: {\n    type: String\n  },\n  fileId: {\n    type: String,\n    autoform: {\n      type: \"cfs-file\",\n      collection: \"files\"\n    }\n  }\n}));\n\nCollections.Docs2 = new Mongo.Collection(\"docs2\");\nCollections.Docs2.attachSchema(new SimpleSchema({\n  name: {\n    type: String\n  },\n  fileId: {\n    type: [String],\n    autoform: {\n      type: \"cfs-files\",\n      collection: \"files\"\n    }\n  }\n}));","FS.debug = true; // enable CFS debug logging\n\n// default GET request headers\nFS.HTTP.setHeadersForGet([\n  ['Cache-Control', 'public, max-age=31536000']\n]);\n\n// GET request headers for the \"any\" store\nFS.HTTP.setHeadersForGet([\n  ['foo', 'bar']\n], 'any');","Router.configure({\n  notFoundTemplate: 'not_found',\n  loadingTemplate: 'loading',\n  layoutTemplate: 'layout'\n});\n\nRouter.onBeforeAction('loading');\n\nRouter.map(function() {\n\n  this.route('images');\n  this.route('files');\n  this.route('autoformExample', {path: 'autoform'})\n});\n\nif (Meteor.isClient) {\n\n  // Scroll to top or requested hash after loading each page\n  Router.onAfterAction(function() {\n    Meteor.setTimeout(function () {\n      var hash = $(window.location.hash);\n      var scrollTo = hash.length ? hash.offset().top : 0;\n      $(\"html, body\").animate({ scrollTop: scrollTo }, 700, \"easeInOutQuart\");\n    }, 0);\n  });\n\n  // Route-related helpers\n  Template.registerHelper(\"absoluteUrl\", function(path) {\n    return Meteor.absoluteUrl(path);\n  });\n\n  Template.registerHelper(\"currentRouteIs\", function(name) {\n    var current = Router.current();\n    return current && current.route && current.route.name === name || false;\n  });\n\n  Template.registerHelper(\"activeRoute\", function(name) {\n    var current = Router.current();\n    return current && current.route && current.route.name === name && \"active\" || \"\";\n  });\n\n}\n","\n\n// push \"fileId\" property to addToPostSchema, so that it's later added to postSchema\n\nMeteor.autorun(function() {\n    addToPostSchema.push(\n      {\n        propertyName: 'medbookfiles',\n        propertySchema: {\n          type: [String],\n          optional: true,\n    /*\n          editable: true,\n          autoform: {\n            type: \"cfs-files\",\n            collection: \"files\"\n          }\n    */\n        }\n      }\n    );\n\n});\n","\nPostUrl = function(f) {\n    if (f.post)\n        return \"/posts/\" + f.post + \"/file/\" + f.name();\n    else\n        return \"/posts/\" + f.owner  + \"/file/\" + f.name();\n}\n"]}