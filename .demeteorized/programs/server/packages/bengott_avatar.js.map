{"version":3,"file":"/packages/bengott:avatar.js","sources":["bengott:avatar/export.js","bengott:avatar/helpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+B;AACA,U;;AAEA,4E;AACA,mC;AACA,Y;;AAEA,6E;AACA,mD;AACA,0B;;AAEA,oE;AACA,sC;AACA,oB;;AAEA,gE;AACA,yE;AACA,yE;AACA,wB;;AAEA,mE;AACA,gC;AACA,uE;AACA,uB;AACA,I;;AAEA,iC;AACA,gC;;AAEA,sB;AACA,mB;;AAEA,yD;AACA,gE;;AAEA,kC;AACA,kE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,K;AACA,yD;AACA,2C;AACA,2E;AACA,sE;AACA,wD;AACA,6B;AACA,0D;AACA,O;AACA,K;;AAEA,oB;AACA,I;;AAEA,qC;AACA,2B;;AAEA,6F;AACA,mE;AACA,0C;AACA,0C;AACA,yE;AACA,4D;AACA,qD;AACA,K;;AAEA,iB;AACA,+B;AACA,4B;AACA,6D;AACA,qF;AACA,K;AACA,kC;AACA,oC;AACA,6F;AACA,K;AACA,gC;AACA,yC;AACA,K;AACA,gC;AACA,+F;AACA,K;AACA,mC;AACA,oD;AACA,K;AACA,8B;AACA,6C;AACA,K;AACA,e;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AC9FA,uD;AACA,6D;AACA,8B;AACA,kF;AACA,mF;AACA,iF;AACA,iF;AACA,oF;AACA,+E;AACA,E;;AAEA,8C;AACA,sB;AACA,4F;;AAEA,wE;AACA,wD;AACA,+C;AACA,2E;AACA,0E;AACA,G;AACA,Q;AACA,4B;AACA,G;;AAEA,iB;AACA,0E;AACA,wE;AACA,4E;AACA,iF;AACA,6B;AACA,qF;AACA,wD;AACA,I;;AAEA,yC;AACA,iD;AACA,E;;AAEA,6E;AACA,kC;AACA,kB;AACA,yC;AACA,yD;AACA,G;AACA,iC;AACA,iE;AACA,G;AACA,Q;AACA,6E;AACA,kD;AACA,qD;AACA,G;AACA,qB;AACA,E","sourcesContent":["// Avatar object to be exported\nAvatar = {\n\n  // If defined (e.g. from a startup config file in your app), these options\n  // override default functionality\n  options: {\n\n    // This property on the user object will be used for retrieving gravatars\n    // (useful when user emails are not published).\n    emailHashProperty: '',\n\n    // What to show when no avatar can be found via linked services:\n    // 'initials' (default) or 'image'\n    defaultType: '',\n\n    // This will replace the included default avatar image's URL\n    // ('packages/bengott_avatar/default.png'). It can be a relative path\n    // (relative to website's base URL, e.g. 'images/defaultAvatar.png').\n    defaultImageUrl: '',\n\n    // Gravatar default option to use (overrides default image URL)\n    // Options are available at:\n    // https://secure.gravatar.com/site/implement/images/#default-image\n    gravatarDefault: ''\n  },\n\n  // Get the initials of the user\n  getInitials: function (user) {\n\n    var initials = '';\n    var parts = [];\n\n    if (user && user.profile && user.profile.firstName) {\n      initials = user.profile.firstName.charAt(0).toUpperCase();\n\n      if (user.profile.lastName) {\n        initials += user.profile.lastName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.familyName) {\n        initials += user.profile.familyName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.secondName) {\n        initials += user.profile.secondName.charAt(0).toUpperCase();\n      }\n    }\n    else if (user && user.profile && user.profile.name) {\n      parts = user.profile.name.split(' ');\n      // Limit getInitials to first and last initial to avoid problems with\n      // very long multi-part names (e.g. \"Jose Manuel Garcia Galvez\")\n      initials = _.first(parts).charAt(0).toUpperCase();\n      if (parts.length > 1) {\n        initials += _.last(parts).charAt(0).toUpperCase();\n      }\n    }\n\n    return initials;\n  },\n\n  // Get the url of the user's avatar\n  getUrl: function (user) {\n\n    var defaultUrl = Avatar.options.defaultImageUrl || 'packages/bengott_avatar/default.png';\n    // If it's a relative path (no '//' anywhere), complete the URL\n    if (defaultUrl.indexOf('//') === -1) {\n      // Strip starting slash if it exists\n      if (defaultUrl.charAt(0) === '/') defaultUrl = defaultUrl.slice(1);\n      // Then add the relative path to the server's base URL\n      defaultUrl = Meteor.absoluteUrl() + defaultUrl;\n    }\n\n    var url = '';\n    var svc = getService(user);\n    if (svc === 'twitter') {\n      // use larger image (200x200 is smallest custom option)\n      url = user.services.twitter.profile_image_url.replace('_normal.', '_200x200.');\n    }\n    else if (svc === 'facebook') {\n      // use larger image (~200x200)\n      url = 'http://graph.facebook.com/' + user.services.facebook.id + '/picture?type=large';\n    }\n    else if (svc === 'google') {\n      url = user.services.google.picture;\n    }\n    else if (svc === 'github') {\n      url = 'http://avatars.githubusercontent.com/' + user.services.github.username + '?s=200';\n    }\n    else if (svc === 'instagram') {\n      url = user.services.instagram.profile_picture;\n    }\n    else if (svc === 'none') {\n      url = getGravatarUrl(user, defaultUrl);\n    }\n    return url;\n  }\n};\n","// Get the account service to use for the user's avatar\n// Priority: Twitter > Facebook > Google > GitHub > Instagram\ngetService = function (user) {\n  if      (user && user.services && user.services.twitter)   { return 'twitter'; }\n  else if (user && user.services && user.services.facebook)  { return 'facebook'; }\n  else if (user && user.services && user.services.google)    { return 'google'; }\n  else if (user && user.services && user.services.github)    { return 'github'; }\n  else if (user && user.services && user.services.instagram) { return 'instagram'; }\n  else                                                       { return 'none'; }\n};\n\ngetGravatarUrl = function (user, defaultUrl) {\n  var gravatarDefault;\n  var validGravatars = ['404', 'mm', 'identicon', 'monsterid', 'wavatar', 'retro', 'blank'];\n\n  // Initials are shown when Gravatar returns 404. Therefore, pass '404'\n  // as the gravatarDefault unless defaultType is image.\n  if (Avatar.options.defaultType === 'image') {\n    var valid = _.contains(validGravatars, Avatar.options.gravatarDefault);\n    gravatarDefault = valid ? Avatar.options.gravatarDefault : defaultUrl;\n  }\n  else {\n    gravatarDefault = '404';\n  }\n\n  var options = {\n    // NOTE: Gravatar's default option requires a publicly accessible URL,\n    // so it won't work when your app is running on localhost and you're\n    // using an image with either the standard default image URL or a custom\n    // defaultImageUrl that is a relative path (e.g. 'images/defaultAvatar.png').\n    default: gravatarDefault,\n    size: 200, // use 200x200 like twitter and facebook above (might be useful later)\n    secure: Meteor.absoluteUrl().slice(0,6) === 'https:'\n  };\n\n  var emailOrHash = getEmailOrHash(user);\n  return Gravatar.imageUrl(emailOrHash, options);\n};\n\n// Get the user's email address or (if the emailHashProperty is defined) hash\ngetEmailOrHash = function (user) {\n  var emailOrHash;\n  if (Avatar.options.emailHashProperty) {\n    emailOrHash = user[Avatar.options.emailHashProperty];\n  }\n  else if (user && user.emails) {\n    emailOrHash = user.emails[0].address; // TODO: try all emails\n  }\n  else {\n    // If all else fails, return 32 zeros (trash hash, hehe) so that Gravatar\n    // has something to build a URL with at least.\n    emailOrHash = '00000000000000000000000000000000';\n  }\n  return emailOrHash;\n};\n"]}