{"version":3,"file":"/packages/telescope-collaboration.js","sources":["telescope-collaboration/lib/collaboration.js","telescope-collaboration/lib/server/publications.js","telescope-collaboration/lib/server/methods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,wC;AACA,S;AACA,mB;AACA,oB;AACA,M;AACA,W;AACA,mB;AACA,M;AACA,W;AACA,mB;AACA,M;;AAEA,kB;AACA,qB;AACA,M;AACA,oB;AACA,sB;AACA,mB;AACA,4B;AACA,2B;AACA,8B;AACA,a;AACA,S;AACA,M;AACA,U;AACA,qB;AACA,sB;AACA,sB;AACA,K;AACA,U;;AAEA,G;;AAEA,wD;AACA,+B;AACA,G;;AAEA,gD;;AAEA,iD;;;AAGA,qC;AACA,iD;AACA,U;AACA,iD;AACA,4C;AACA,I;AACA,C;;AAEA,8C;AACA,kB;AACA,mC;AACA,U;AACA,G;AACA,E;AACA,kD;AACA,qC;;AAEA,2F;AACA,qB;AACA,G;AACA,kC;AACA,qB;AACA,qB;AACA,oB;AACA,K;AACA,G;AACA,E;;AAEA,qD;AACA,gC;AACA,0D;AACA,wC;AACA,0E;AACA,K;AACA,oB;AACA,C;;AAEA,wD;AACA,sD;;AAEA,4B;AACA,uB;AACA,uB;AACA,uB;AACA,uB;AACA,K;;AAEA,G;;AAEA,qC;AACA,4C;AACA,E;;;;;;;;;;;;;;;;;;;;;AC9FA,4C;AACA,+B;AACA,mC;AACA,oD;AACA,e;AACA,G;AACA,Y;AACA,G;;;;AAIA,qB;AACA,K;AACA,sC;AACA,yB;AACA,2B;AACA,0B;AACA,S;AACA,K;AACA,E;;;AAGA,gB;AACA,qD;AACA,0D;AACA,+H;AACA,8F;AACA,S;AACA,M;AACA,I;AACA,4C;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;;;;AC/BA,mD;AACA,oC;AACA,yB;AACA,wB;AACA,4C;AACA,qD;AACA,2E;AACA,0E;AACA,kF;AACA,oB;;AAEA,oC;;AAEA,8E;;AAEA,+B;AACA,gC;AACA,kG;;AAEA,uC;AACA,mB;AACA,oE;;;AAGA,mB;AACA,uF;AACA,iE;AACA,4F;;AAEA,kD;AACA,oD;AACA,uG;AACA,O;AACA,K;;AAEA,oC;AACA,M;AACA,gC;AACA,gE;AACA,2D;AACA,qI;;AAEA,mE;AACA,0E;AACA,+H;AACA,K;AACA,M;;AAEA,kF;;AAEA,oC;AACA,uB;AACA,kB;AACA,mB;AACA,iB;AACA,qB;AACA,yC;AACA,iB;AACA,mB;AACA,uB;AACA,mB;AACA,e;AACA,qB;AACA,M;;AAEA,oC;AACA,oC;AACA,oC;;AAEA,0B;;AAEA,gB;AACA,sC;AACA,oC;;AAEA,e;AACA,qC;;AAEA,sC;;AAEA,iF;;AAEA,oC;AACA,uE;AACA,+E;AACA,uC;AACA,a;AACA,oC;;AAEA,8E;;AAEA,wB;AACA,oC;AACA,kC;AACA,oC;;AAEA,mF;AACA,2C;AACA,qD;AACA,kC;AACA,yH;AACA,Q;;;AAGA,iF;;AAEA,uE;AACA,oF;AACA,uC;AACA,a;;AAEA,mF;;AAEA,4B;AACA,+D;;AAEA,wD;;AAEA,gD;;AAEA,gB;AACA,G;AACA,mC;AACA,kF;;AAEA,uB;;AAEA,+B;;AAEA,4E;AACA,kC;;AAEA,mF;AACA,2C;AACA,sD;AACA,oC;AACA,2H;AACA,S;;;AAGA,iF;;AAEA,uE;AACA,oF;AACA,uC;AACA,a;;AAEA,mF;;AAEA,4B;AACA,+D;AACA,wD;AACA,gD;AACA,oB;AACA,C;;;AAGA,4B;;AAEA,kB;AACA,uD;AACA,wC;AACA,4D;AACA,kH;;AAEA,kD;AACA,wC;AACA,Y;AACA,yD;AACA,gD;AACA,mD;AACA,qI;AACA,8G;AACA,e;AACA,Y;;AAEA,Q;AACA,0D;AACA,8C;AACA,iD;AACA,gI;AACA,0G;AACA,W;AACA,M;;AAEA,Y;;AAEA,K;;AAEA,6C;AACA,gB;AACA,gC;AACA,iD;;AAEA,yC;AACA,kB;AACA,gG;AACA,+D;AACA,a;AACA,W;;AAEA,2B;AACA,oD;AACA,iE;AACA,S;AACA,gC;;AAEA,uC;AACA,iC;AACA,8B;AACA,wC;AACA,mC;AACA,uC;AACA,+B;AACA,2B;AACA,8B;AACA,uB;AACA,yB;AACA,iC;;AAEA,mD;AACA,iD;AACA,4C;AACA,M;AACA,K;AACA,G","sourcesContent":["\ncollaborationSchema = new SimpleSchema({\n   _id: {\n      type: String,\n      optional: true\n    },\n    slug: {\n      type: String,\n    },\n    name: {\n      type: String,\n    },\n\n    description: {\n        type: String,\n    },\n    collaborators: {\n        type:[String],\n        autoform: {\n            type: \"select2\",\n            afFieldInput: {\n                multiple: true\n            }\n        }\n    },\n        /*\n    administrators: {\n        type:[String],\n        optional: true\n    }\n        */\n\n});\n\nCollaboration = new Meteor.Collection(\"collaboration\", {\n // schema: collaborationSchema\n});\n\nCollaboration.attachSchema(collaborationSchema);\n\nSchemas = { collaboration: collaborationSchema };\n\n\n// collaboration post list parameters\nviewParameters.collaboration = function (terms) {\n  return {\n    find: {'collaboration': terms.collaboration},\n    options: {sort: {sticky: -1, score: -1}}\n  };\n}\n\n// push \"collaboration\" modules to postHeading\npostHeading.push({\n  template: 'collaborationTagList',\n  order: 3\n});\n  \n// push \"collaborationMenu\" template to primaryNav\nprimaryNav.push('collaborationMenu');\n\n// push \"collaboration\" property to addToPostSchema, so that it's later added to postSchema\naddToPostSchema.push(\n  {\n    propertyName: 'collaboration',\n    propertySchema: {\n      optional: true,\n      type: [String]\n    }\n  }\n);\n\nvar getCheckedCollaboration = function (properties) {\n  properties.collaboration = [];\n  $('input[name=collaboration]:checked').each(function() {\n    var collaborationId = $(this).val();\n    properties.collaboration.push(Collaboration.findOne(collaborationId));\n  });\n  return properties;\n}\n\npostSubmitClientCallbacks.push(getCheckedCollaboration);\npostEditClientCallbacks.push(getCheckedCollaboration);\n\nMeteor.startup(function () {\n  Collaboration.allow({\n    insert: isAdminById\n  , update: isAdminById\n  , remove: isAdminById\n  });\n\n});\n\ngetCollaborationUrl = function(slug){\n  return getSiteUrl()+'collaboration/'+slug;\n};\n\n\n","Meteor.publish('collaboration', function() {\n  if(canViewById(this.userId)){\n      var f = Collaboration.find();\n      console.log(\"collaboration found \", f.count())\n      return f;\n  }\n  return [];\n});\n\n\n\naddToPostSchema.push(\n    {\n        propertyName: 'collaboration',\n        propertySchema: {\n            type: [String],\n            optional: true\n        }\n    }\n);\n\n\nMeteor.methods({\n  addCollaboratorToCollaboration : function(params) {\n      console.log(\"addCollaboratorToCollaboration method\")\n    var ret = Posts.update({_id: params.post_id}, {$addToSet: {collaboration: params.collaboration_name} }, function foo(err) {\n          console.log(\"addCollaboratorToCollaboration Posts update params,err=\", params, err);\n        }\n    );\n  },\n  createCollaboration : function(bundle) { }\n  }\n);\n\n\n","\nfunction TelescopePost(post, userId, isSimulation){\n    var title = cleanUp(post.title),\n        body = post.body,\n        userId = userId,\n        user = Meteor.users.findOne(userId),\n        timeSinceLastPost=timeSinceLast(user, Posts),\n        numberOfPostsInPast24Hours=numberOfItemsInPast24Hours(user, Posts),\n        postInterval = Math.abs(parseInt(getSetting('postInterval', 30))),\n        maxPostsPer24Hours = Math.abs(parseInt(getSetting('maxPostsPerDay', 30))),\n        postId = '';\n\n    console.log(\"TelescopePost 13\");\n\n    // ------------------------------ Checks ------------------------------ //\n\n    // check that user can post\n    if (!user || !canPost(user))\n      throw new Meteor.Error(601, i18n.t('You need to login or be invited to post new stories.'));\n\n    // check that user provided a title\n    if(!post.title)\n      throw new Meteor.Error(602, i18n.t('Please fill in a title'));\n\n\n    if(!!post.url){\n      // check that there are no previous posts with the same link in the past 6 months\n      var sixMonthsAgo = moment().subtract(6, 'months').toDate();\n      var postWithSameLink = Posts.findOne({url: post.url, postedAt: {$gte: sixMonthsAgo}});\n\n      if(typeof postWithSameLink !== 'undefined'){\n        Meteor.call('upvotePost', postWithSameLink);\n        throw new Meteor.Error(603, i18n.t('This link has already been posted'), postWithSameLink._id);\n      }\n    }\n\n    console.log(\"TelescopePost 37\");\n    /*\n    if(!isAdmin(Meteor.user())){\n      // check that user waits more than X seconds between posts\n      if(!isSimulation && timeSinceLastPost < postInterval)\n        throw new Meteor.Error(604, i18n.t('Please wait ')+(postInterval-timeSinceLastPost)+i18n.t(' seconds before posting again'));\n\n      // check that the user doesn't post more than Y posts per day\n      if(!isSimulation && numberOfPostsInPast24Hours > maxPostsPer24Hours)\n        throw new Meteor.Error(605, i18n.t('Sorry, you cannot submit more than ')+maxPostsPer24Hours+i18n.t(' posts per day'));\n    }\n    */\n\n    // ------------------------------ Properties ------------------------------ //\n\n    console.log(\"TelescopePost 52\");\n    // Basic Properties\n    properties = {\n      title: title,\n      body: body,\n      userId: userId,\n      author: getDisplayNameById(userId),\n      upvotes: 0,\n      downvotes: 0,\n      commentsCount: 0,\n      baseScore: 0,\n      score: 0,\n      inactive: false\n    };\n\n    console.log(\"TelescopePost 67\");\n    properties.userId = post.userId;\n    console.log(\"TelescopePost 69\");\n\n    properties.status = 2;\n\n    // CreatedAt\n    properties.createdAt = new Date();\n    console.log(\"TelescopePost 73\");\n\n    // PostedAt\n    properties.postedAt = new Date();\n\n    post = _.extend(post, properties);\n\n    // ------------------------------ Callbacks ------------------------------ //\n\n    console.log(\"TelescopePost 82\");\n    // run all post submit server callbacks on post object successively\n    post = postSubmitMethodCallbacks.reduce(function(result, currentFunction) {\n        return currentFunction(result);\n    }, post);\n    console.log(\"TelescopePost 87\");\n\n    // ------------------------------ Insert ------------------------------ //\n\n    // console.log(post)\n    console.log(\"TelescopePost 94\");\n    post._id = Posts.insert(post);\n    console.log(\"TelescopePost 96\");\n\n    // ------------------------------ MedBook Post Files ----------------------- //\n    if (post.blobs && post.blobs.length >0)\n       for (var i = 0; i < post.blobs.length; i++)  {\n          var fid = post.blobs[i];\n          FileUploadCollection.update({\"_id\": new Meteor.Collection.ObjectID(fid)}, { \"$set\" : { \"postId\" : post._id } })\n       }\n\n\n    // ------------------------------ Callbacks ------------------------------ //\n\n    // run all post submit server callbacks on post object successively\n    post = postAfterSubmitMethodCallbacks.reduce(function(result, currentFunction) {\n        return currentFunction(result);\n    }, post);\n\n    // ------------------------------ Post-Insert ------------------------------ //\n\n    // increment posts count\n    Meteor.users.update({_id: userId}, {$inc: {postCount: 1}});\n\n    var postAuthor =  Meteor.users.findOne(post.userId);\n\n    Meteor.call('upvotePost', post, postAuthor);\n\n    return post;\n  }\nfunction MedBookPost(post,userId) {\n    // ------------------------------ Properties ------------------------------ //\n\n    // Basic Properties\n\n    console.log(\"MedBookPost\");\n\n    // ------------------------------ Insert Post ----------------------- //\n    post._id = Posts.insert(post);\n\n    // ------------------------------ MedBook Post Files ----------------------- //\n    if (post.blobs && post.blobs.length >0)\n        for (var i = 0; i < post.blobs.length; i++)  {\n            var fid = post.blobs[i];\n            FileUploadCollection.update({\"_id\": new Meteor.Collection.ObjectID(fid)}, { \"$set\" : { \"postId\" : post._id } })\n        }\n\n\n    // ------------------------------ Callbacks ------------------------------ //\n\n    // run all post submit server callbacks on post object successively\n    post = postAfterSubmitMethodCallbacks.reduce(function(result, currentFunction) {\n        return currentFunction(result);\n    }, post);\n\n    // ------------------------------ Post-Insert ------------------------------ //\n\n    // increment posts count\n    Meteor.users.update({_id: userId}, {$inc: {postCount: 1}});\n    var postAuthor =  Meteor.users.findOne(post.userId);\n    Meteor.call('upvotePost', post, postAuthor);\n    return post._id;\n}\n\n\nMeteor.startup(function () {\n\n  Meteor.methods({\n    createCollaborationMethod: function(collaboration){\n              console.log(collaboration)\n              if (!Meteor.user() || !isAdmin(Meteor.user()))\n                  throw new Meteor.Error(i18n.t('You need to login and be an admin to add a new collaboration.'));\n\n              Collaboration.insert(collaboration);\n              return collaboration.name;\n          },\n    joinCollaborationMethod: function(collaboration_id) {\n          console.log(\"joinCollaborationMethod\")\n          var ad = Meteor.user().emails[0].address;\n          Collaboration.update({_id: collaboration_id}, { $addToSet: { collaborators: ad, administrators:ad }}, function (err, err2){\n                  console.log(\"joinCollaborationMethod Collaboration.update\", collaboration_id, ad, err, err2)\n              }\n          );\n\n      },\n    leaveCollaborationMethod: function(collaboration_id) {\n        console.log(\"joinCollaborationMethod\")\n        var ad = Meteor.user().emails[0].address;\n        Collaboration.update({_id: collaboration_id}, { $pull: { collaborators: ad, administrators:ad  }}, function (err, err2){\n              console.log(\"joinCollaborationMethod Collaboration.update\", collaboration_id, ad, err, err2)\n          }\n    );\n\n          },\n\n  });\n\nvar querystring =  Npm.require(\"querystring\")\n  HTTP.methods({\n    medbookPost: function(data){\n        var qs = querystring.parse(String(data));\n\n        var user = Meteor.users.findOne({\n            $or: [\n                {'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(qs.token)},\n                {'services.resume.loginTokens.token': qs.token}\n            ]\n        });\n\n        if (user == null) {\n            this.setStatusCode(401); // Unauthorized\n            return { state: \"failed\", reason: \"token not found\" }\n        }\n        this.setUserId(user._id)\n\n        var post = JSON.parse(qs.json);\n        post.userId   = user._id;\n        post.sticky   = false;\n        post.status   = STATUS_APPROVED;\n        post.postedAt = new Date();\n        post.createdAt = post.postedAt;\n        post.commentsCount = 0;\n        post.downvotes = 0;\n        post.inactive = false;\n        post.score = 0;\n        post.upvotes = 0;\n        console.log(\"post\", post)\n\n        // TelescopePost(post, post.userId, false);\n        var _id = MedBookPost(post, post.userId);\n        return { state: \"success\", _id: _id}\n     }\n  });\n});\n\n"]}